// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Workflow {
  id          String  @id @default(cuid())
  userId      String
  name        String
  description String?

  defination    String
  executionPlan String?
  creditsCost   Int       @default(0)
  cron          String? //
  status        String
  lastRunAt     DateTime?
  lastRunId     String?
  lastRunStatus String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  nextRunAt     DateTime?

  executions WorkflowExecution[]

  // User cannot have two workflows with same name
  @@unique([name, userId])
}

model WorkflowExecution {
  id                 String    @id @default(cuid())
  workflowId         String
  workflowDefination String    @default("{}")
  userId             String
  trigger            String
  status             String
  createdAt          DateTime  @default(now())
  startedAt          DateTime?
  completedAt        DateTime?
  creditsConsumed    Int       @default(0)

  workflow Workflow         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  phases   ExecutionPhase[]
}

model ExecutionPhase {
  id              String    @id @default(cuid())
  userId          String
  status          String
  number          Int
  node            String
  name            String
  startedAt       DateTime?
  completedAt     DateTime?
  inputs          String?
  outputs         String?
  creditsConsumed Int?

  workflowExecutionId String
  execution           WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)
  logs                ExecutionLog[]
}

model ExecutionLog {
  id               String         @id @default(cuid())
  logLevel         String
  message          String
  timestamp        DateTime       @default(now())
  executionPhaseId String
  executionPhase   ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}

model UserBalance {
  userId  String @id
  credits Int    @default(0)
}
